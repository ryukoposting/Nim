/* Generated by the Nim Compiler v0.19.9 */
/*   (c) 2019 Andreas Rumpf */

var framePtr = null;
var excHandler = 0;
var lastJSError = null;
if (typeof Int8Array === 'undefined') Int8Array = Array;
if (typeof Int16Array === 'undefined') Int16Array = Array;
if (typeof Int32Array === 'undefined') Int32Array = Array;
if (typeof Uint8Array === 'undefined') Uint8Array = Array;
if (typeof Uint16Array === 'undefined') Uint16Array = Array;
if (typeof Uint32Array === 'undefined') Uint32Array = Array;
if (typeof Float32Array === 'undefined') Float32Array = Array;
if (typeof Float64Array === 'undefined') Float64Array = Array;
var NTI43032 = {size: 0,kind: 1,base: null,node: null,finalizer: null};
var NTI202074 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI46862 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI205327 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI84448 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI84444 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI84440 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI84436 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI84432 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI84428 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI84424 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI84420 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI84416 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI84412 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI84408 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI84404 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI84400 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI84396 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI84392 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI84388 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI84384 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI84380 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI84376 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI84372 = {size: 0,kind: 25,base: null,node: null,finalizer: null};
var NTI84205 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI84283 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI84281 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI84227 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI84565 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI84563 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI84561 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI84231 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI84229 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI86305 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI46850 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI46858 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI43006 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI62231 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI46808 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI46914 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI43016 = {size: 0,kind: 40,base: null,node: null,finalizer: null};
var NTI43040 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NTI43042 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI46908 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI46826 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI46828 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI46842 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI46846 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NNI46846 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI46846.node = NNI46846;
var NNI46842 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI46842.node = NNI46842;
var NNI46828 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI46828.node = NNI46828;
NTI46908.base = NTI46826;
NTI46914.base = NTI46826;
var NNI46826 = {kind: 2, len: 6, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI46908, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI43042, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI43040, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI43040, name: "trace", sons: null}, 
{kind: 1, offset: "raiseId", len: 0, typ: NTI43016, name: "raiseId", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI46914, name: "up", sons: null}]};
NTI46826.node = NNI46826;
var NNI46808 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI46808.node = NNI46808;
NTI46826.base = NTI46808;
NTI46828.base = NTI46826;
NTI46842.base = NTI46828;
NTI46846.base = NTI46842;
var NNI62231 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI43042, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI43006, name: "Field1", sons: null}]};
NTI62231.node = NNI62231;
var NNI46858 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI46858.node = NNI46858;
NTI46858.base = NTI46828;
var NNI46850 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI46850.node = NNI46850;
NTI46850.base = NTI46828;
NTI84561.base = NTI84229;
NTI84563.base = NTI84229;
NTI84565.base = NTI84229;
var NNI84227 = {kind: 2, offset: 0, typ: null, name: null, len: 12, sons: {"1": {kind: 1, offset: 1, typ: NTI84227, name: "ElementNode", len: 0, sons: null}, 
"2": {kind: 1, offset: 2, typ: NTI84227, name: "AttributeNode", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI84227, name: "TextNode", len: 0, sons: null}, 
"4": {kind: 1, offset: 4, typ: NTI84227, name: "CDATANode", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI84227, name: "EntityRefNode", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI84227, name: "EntityNode", len: 0, sons: null}, 
"7": {kind: 1, offset: 7, typ: NTI84227, name: "ProcessingInstructionNode", len: 0, sons: null}, 
"8": {kind: 1, offset: 8, typ: NTI84227, name: "CommentNode", len: 0, sons: null}, 
"9": {kind: 1, offset: 9, typ: NTI84227, name: "DocumentNode", len: 0, sons: null}, 
"10": {kind: 1, offset: 10, typ: NTI84227, name: "DocumentTypeNode", len: 0, sons: null}, 
"11": {kind: 1, offset: 11, typ: NTI84227, name: "DocumentFragmentNode", len: 0, sons: null}, 
"12": {kind: 1, offset: 12, typ: NTI84227, name: "NotationNode", len: 0, sons: null}}};
NTI84227.node = NNI84227;
var NNI84283 = {kind: 2, len: 91, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "background", len: 0, typ: NTI43042, name: "background", sons: null}, 
{kind: 1, offset: "backgroundAttachment", len: 0, typ: NTI43042, name: "backgroundAttachment", sons: null}, 
{kind: 1, offset: "backgroundColor", len: 0, typ: NTI43042, name: "backgroundColor", sons: null}, 
{kind: 1, offset: "backgroundImage", len: 0, typ: NTI43042, name: "backgroundImage", sons: null}, 
{kind: 1, offset: "backgroundPosition", len: 0, typ: NTI43042, name: "backgroundPosition", sons: null}, 
{kind: 1, offset: "backgroundRepeat", len: 0, typ: NTI43042, name: "backgroundRepeat", sons: null}, 
{kind: 1, offset: "border", len: 0, typ: NTI43042, name: "border", sons: null}, 
{kind: 1, offset: "borderBottom", len: 0, typ: NTI43042, name: "borderBottom", sons: null}, 
{kind: 1, offset: "borderBottomColor", len: 0, typ: NTI43042, name: "borderBottomColor", sons: null}, 
{kind: 1, offset: "borderBottomStyle", len: 0, typ: NTI43042, name: "borderBottomStyle", sons: null}, 
{kind: 1, offset: "borderBottomWidth", len: 0, typ: NTI43042, name: "borderBottomWidth", sons: null}, 
{kind: 1, offset: "borderColor", len: 0, typ: NTI43042, name: "borderColor", sons: null}, 
{kind: 1, offset: "borderLeft", len: 0, typ: NTI43042, name: "borderLeft", sons: null}, 
{kind: 1, offset: "borderLeftColor", len: 0, typ: NTI43042, name: "borderLeftColor", sons: null}, 
{kind: 1, offset: "borderLeftStyle", len: 0, typ: NTI43042, name: "borderLeftStyle", sons: null}, 
{kind: 1, offset: "borderLeftWidth", len: 0, typ: NTI43042, name: "borderLeftWidth", sons: null}, 
{kind: 1, offset: "borderRight", len: 0, typ: NTI43042, name: "borderRight", sons: null}, 
{kind: 1, offset: "borderRightColor", len: 0, typ: NTI43042, name: "borderRightColor", sons: null}, 
{kind: 1, offset: "borderRightStyle", len: 0, typ: NTI43042, name: "borderRightStyle", sons: null}, 
{kind: 1, offset: "borderRightWidth", len: 0, typ: NTI43042, name: "borderRightWidth", sons: null}, 
{kind: 1, offset: "borderStyle", len: 0, typ: NTI43042, name: "borderStyle", sons: null}, 
{kind: 1, offset: "borderTop", len: 0, typ: NTI43042, name: "borderTop", sons: null}, 
{kind: 1, offset: "borderTopColor", len: 0, typ: NTI43042, name: "borderTopColor", sons: null}, 
{kind: 1, offset: "borderTopStyle", len: 0, typ: NTI43042, name: "borderTopStyle", sons: null}, 
{kind: 1, offset: "borderTopWidth", len: 0, typ: NTI43042, name: "borderTopWidth", sons: null}, 
{kind: 1, offset: "borderWidth", len: 0, typ: NTI43042, name: "borderWidth", sons: null}, 
{kind: 1, offset: "bottom", len: 0, typ: NTI43042, name: "bottom", sons: null}, 
{kind: 1, offset: "captionSide", len: 0, typ: NTI43042, name: "captionSide", sons: null}, 
{kind: 1, offset: "clear", len: 0, typ: NTI43042, name: "clear", sons: null}, 
{kind: 1, offset: "clip", len: 0, typ: NTI43042, name: "clip", sons: null}, 
{kind: 1, offset: "color", len: 0, typ: NTI43042, name: "color", sons: null}, 
{kind: 1, offset: "cursor", len: 0, typ: NTI43042, name: "cursor", sons: null}, 
{kind: 1, offset: "direction", len: 0, typ: NTI43042, name: "direction", sons: null}, 
{kind: 1, offset: "display", len: 0, typ: NTI43042, name: "display", sons: null}, 
{kind: 1, offset: "emptyCells", len: 0, typ: NTI43042, name: "emptyCells", sons: null}, 
{kind: 1, offset: "cssFloat", len: 0, typ: NTI43042, name: "cssFloat", sons: null}, 
{kind: 1, offset: "font", len: 0, typ: NTI43042, name: "font", sons: null}, 
{kind: 1, offset: "fontFamily", len: 0, typ: NTI43042, name: "fontFamily", sons: null}, 
{kind: 1, offset: "fontSize", len: 0, typ: NTI43042, name: "fontSize", sons: null}, 
{kind: 1, offset: "fontStretch", len: 0, typ: NTI43042, name: "fontStretch", sons: null}, 
{kind: 1, offset: "fontStyle", len: 0, typ: NTI43042, name: "fontStyle", sons: null}, 
{kind: 1, offset: "fontVariant", len: 0, typ: NTI43042, name: "fontVariant", sons: null}, 
{kind: 1, offset: "fontWeight", len: 0, typ: NTI43042, name: "fontWeight", sons: null}, 
{kind: 1, offset: "height", len: 0, typ: NTI43042, name: "height", sons: null}, 
{kind: 1, offset: "left", len: 0, typ: NTI43042, name: "left", sons: null}, 
{kind: 1, offset: "letterSpacing", len: 0, typ: NTI43042, name: "letterSpacing", sons: null}, 
{kind: 1, offset: "lineHeight", len: 0, typ: NTI43042, name: "lineHeight", sons: null}, 
{kind: 1, offset: "listStyle", len: 0, typ: NTI43042, name: "listStyle", sons: null}, 
{kind: 1, offset: "listStyleImage", len: 0, typ: NTI43042, name: "listStyleImage", sons: null}, 
{kind: 1, offset: "listStylePosition", len: 0, typ: NTI43042, name: "listStylePosition", sons: null}, 
{kind: 1, offset: "listStyleType", len: 0, typ: NTI43042, name: "listStyleType", sons: null}, 
{kind: 1, offset: "margin", len: 0, typ: NTI43042, name: "margin", sons: null}, 
{kind: 1, offset: "marginBottom", len: 0, typ: NTI43042, name: "marginBottom", sons: null}, 
{kind: 1, offset: "marginLeft", len: 0, typ: NTI43042, name: "marginLeft", sons: null}, 
{kind: 1, offset: "marginRight", len: 0, typ: NTI43042, name: "marginRight", sons: null}, 
{kind: 1, offset: "marginTop", len: 0, typ: NTI43042, name: "marginTop", sons: null}, 
{kind: 1, offset: "maxHeight", len: 0, typ: NTI43042, name: "maxHeight", sons: null}, 
{kind: 1, offset: "maxWidth", len: 0, typ: NTI43042, name: "maxWidth", sons: null}, 
{kind: 1, offset: "minHeight", len: 0, typ: NTI43042, name: "minHeight", sons: null}, 
{kind: 1, offset: "minWidth", len: 0, typ: NTI43042, name: "minWidth", sons: null}, 
{kind: 1, offset: "overflow", len: 0, typ: NTI43042, name: "overflow", sons: null}, 
{kind: 1, offset: "padding", len: 0, typ: NTI43042, name: "padding", sons: null}, 
{kind: 1, offset: "paddingBottom", len: 0, typ: NTI43042, name: "paddingBottom", sons: null}, 
{kind: 1, offset: "paddingLeft", len: 0, typ: NTI43042, name: "paddingLeft", sons: null}, 
{kind: 1, offset: "paddingRight", len: 0, typ: NTI43042, name: "paddingRight", sons: null}, 
{kind: 1, offset: "paddingTop", len: 0, typ: NTI43042, name: "paddingTop", sons: null}, 
{kind: 1, offset: "pageBreakAfter", len: 0, typ: NTI43042, name: "pageBreakAfter", sons: null}, 
{kind: 1, offset: "pageBreakBefore", len: 0, typ: NTI43042, name: "pageBreakBefore", sons: null}, 
{kind: 1, offset: "pointerEvents", len: 0, typ: NTI43042, name: "pointerEvents", sons: null}, 
{kind: 1, offset: "position", len: 0, typ: NTI43042, name: "position", sons: null}, 
{kind: 1, offset: "right", len: 0, typ: NTI43042, name: "right", sons: null}, 
{kind: 1, offset: "scrollbar3dLightColor", len: 0, typ: NTI43042, name: "scrollbar3dLightColor", sons: null}, 
{kind: 1, offset: "scrollbarArrowColor", len: 0, typ: NTI43042, name: "scrollbarArrowColor", sons: null}, 
{kind: 1, offset: "scrollbarBaseColor", len: 0, typ: NTI43042, name: "scrollbarBaseColor", sons: null}, 
{kind: 1, offset: "scrollbarDarkshadowColor", len: 0, typ: NTI43042, name: "scrollbarDarkshadowColor", sons: null}, 
{kind: 1, offset: "scrollbarFaceColor", len: 0, typ: NTI43042, name: "scrollbarFaceColor", sons: null}, 
{kind: 1, offset: "scrollbarHighlightColor", len: 0, typ: NTI43042, name: "scrollbarHighlightColor", sons: null}, 
{kind: 1, offset: "scrollbarShadowColor", len: 0, typ: NTI43042, name: "scrollbarShadowColor", sons: null}, 
{kind: 1, offset: "scrollbarTrackColor", len: 0, typ: NTI43042, name: "scrollbarTrackColor", sons: null}, 
{kind: 1, offset: "tableLayout", len: 0, typ: NTI43042, name: "tableLayout", sons: null}, 
{kind: 1, offset: "textAlign", len: 0, typ: NTI43042, name: "textAlign", sons: null}, 
{kind: 1, offset: "textDecoration", len: 0, typ: NTI43042, name: "textDecoration", sons: null}, 
{kind: 1, offset: "textIndent", len: 0, typ: NTI43042, name: "textIndent", sons: null}, 
{kind: 1, offset: "textTransform", len: 0, typ: NTI43042, name: "textTransform", sons: null}, 
{kind: 1, offset: "transform", len: 0, typ: NTI43042, name: "transform", sons: null}, 
{kind: 1, offset: "top", len: 0, typ: NTI43042, name: "top", sons: null}, 
{kind: 1, offset: "verticalAlign", len: 0, typ: NTI43042, name: "verticalAlign", sons: null}, 
{kind: 1, offset: "visibility", len: 0, typ: NTI43042, name: "visibility", sons: null}, 
{kind: 1, offset: "width", len: 0, typ: NTI43042, name: "width", sons: null}, 
{kind: 1, offset: "wordSpacing", len: 0, typ: NTI43042, name: "wordSpacing", sons: null}, 
{kind: 1, offset: "zIndex", len: 0, typ: NTI43006, name: "zIndex", sons: null}]};
NTI84283.node = NNI84283;
NTI84283.base = NTI46808;
NTI84281.base = NTI84283;
var NNI84231 = {kind: 2, len: 14, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "attributes", len: 0, typ: NTI84561, name: "attributes", sons: null}, 
{kind: 1, offset: "childNodes", len: 0, typ: NTI84563, name: "childNodes", sons: null}, 
{kind: 1, offset: "children", len: 0, typ: NTI84565, name: "children", sons: null}, 
{kind: 1, offset: "data", len: 0, typ: NTI43042, name: "data", sons: null}, 
{kind: 1, offset: "firstChild", len: 0, typ: NTI84229, name: "firstChild", sons: null}, 
{kind: 1, offset: "lastChild", len: 0, typ: NTI84229, name: "lastChild", sons: null}, 
{kind: 1, offset: "nextSibling", len: 0, typ: NTI84229, name: "nextSibling", sons: null}, 
{kind: 1, offset: "nodeName", len: 0, typ: NTI43042, name: "nodeName", sons: null}, 
{kind: 1, offset: "nodeType", len: 0, typ: NTI84227, name: "nodeType", sons: null}, 
{kind: 1, offset: "nodeValue", len: 0, typ: NTI43042, name: "nodeValue", sons: null}, 
{kind: 1, offset: "parentNode", len: 0, typ: NTI84229, name: "parentNode", sons: null}, 
{kind: 1, offset: "previousSibling", len: 0, typ: NTI84229, name: "previousSibling", sons: null}, 
{kind: 1, offset: "innerHTML", len: 0, typ: NTI43042, name: "innerHTML", sons: null}, 
{kind: 1, offset: "style", len: 0, typ: NTI84281, name: "style", sons: null}]};
NTI84231.node = NNI84231;
var NNI84205 = {kind: 2, len: 20, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "onabort", len: 0, typ: NTI84372, name: "onabort", sons: null}, 
{kind: 1, offset: "onblur", len: 0, typ: NTI84376, name: "onblur", sons: null}, 
{kind: 1, offset: "onchange", len: 0, typ: NTI84380, name: "onchange", sons: null}, 
{kind: 1, offset: "onclick", len: 0, typ: NTI84384, name: "onclick", sons: null}, 
{kind: 1, offset: "ondblclick", len: 0, typ: NTI84388, name: "ondblclick", sons: null}, 
{kind: 1, offset: "onerror", len: 0, typ: NTI84392, name: "onerror", sons: null}, 
{kind: 1, offset: "onfocus", len: 0, typ: NTI84396, name: "onfocus", sons: null}, 
{kind: 1, offset: "onkeydown", len: 0, typ: NTI84400, name: "onkeydown", sons: null}, 
{kind: 1, offset: "onkeypress", len: 0, typ: NTI84404, name: "onkeypress", sons: null}, 
{kind: 1, offset: "onkeyup", len: 0, typ: NTI84408, name: "onkeyup", sons: null}, 
{kind: 1, offset: "onload", len: 0, typ: NTI84412, name: "onload", sons: null}, 
{kind: 1, offset: "onmousedown", len: 0, typ: NTI84416, name: "onmousedown", sons: null}, 
{kind: 1, offset: "onmousemove", len: 0, typ: NTI84420, name: "onmousemove", sons: null}, 
{kind: 1, offset: "onmouseout", len: 0, typ: NTI84424, name: "onmouseout", sons: null}, 
{kind: 1, offset: "onmouseover", len: 0, typ: NTI84428, name: "onmouseover", sons: null}, 
{kind: 1, offset: "onmouseup", len: 0, typ: NTI84432, name: "onmouseup", sons: null}, 
{kind: 1, offset: "onreset", len: 0, typ: NTI84436, name: "onreset", sons: null}, 
{kind: 1, offset: "onselect", len: 0, typ: NTI84440, name: "onselect", sons: null}, 
{kind: 1, offset: "onsubmit", len: 0, typ: NTI84444, name: "onsubmit", sons: null}, 
{kind: 1, offset: "onunload", len: 0, typ: NTI84448, name: "onunload", sons: null}]};
NTI84205.node = NNI84205;
NTI84205.base = NTI46808;
NTI84231.base = NTI84205;
NTI84229.base = NTI84231;
NTI86305.base = NTI84229;
NTI205327.base = NTI43042;
var NNI46862 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI46862.node = NNI46862;
NTI46862.base = NTI46828;
var NNI202074 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI43006, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI43032, name: "Field1", sons: null}]};
NTI202074.node = NNI202074;

function makeNimstrLit(c_64273) {
		  var ln = c_64273.length;
  var result = new Array(ln);
  for (var i = 0; i < ln; ++i) {
    result[i] = c_64273.charCodeAt(i);
  }
  return result;
  

	
}

function setConstr() {
		    var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

	
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);

function nimCopy(dest_65442, src_65443, ti_65444) {
	var result_65619 = null;

		switch (ti_65444.kind) {
		case 21:
		case 22:
		case 23:
		case 5:
			if (!(is_fat_pointer_65401(ti_65444))) {
			result_65619 = src_65443;
			}
			else {
				result_65619 = [src_65443[0], src_65443[1]];
			}
			
			break;
		case 19:
			      if (dest_65442 === null || dest_65442 === undefined) {
        dest_65442 = {};
      }
      else {
        for (var key in dest_65442) { delete dest_65442[key]; }
      }
      for (var key in src_65443) { dest_65442[key] = src_65443[key]; }
      result_65619 = dest_65442;
    
			break;
		case 18:
		case 17:
			if (!((ti_65444.base == null))) {
			result_65619 = nimCopy(dest_65442, src_65443, ti_65444.base);
			}
			else {
			if ((ti_65444.kind == 17)) {
			result_65619 = (dest_65442 === null || dest_65442 === undefined) ? {m_type: ti_65444} : dest_65442;
			}
			else {
				result_65619 = (dest_65442 === null || dest_65442 === undefined) ? {} : dest_65442;
			}
			}
			nimCopyAux(result_65619, src_65443, ti_65444.node);
			break;
		case 24:
		case 4:
		case 27:
		case 16:
			      if (src_65443 === null) {
        result_65619 = null;
      }
      else {
        if (dest_65442 === null || dest_65442 === undefined) {
          dest_65442 = new Array(src_65443.length);
        }
        else {
          dest_65442.length = src_65443.length;
        }
        result_65619 = dest_65442;
        for (var i = 0; i < src_65443.length; ++i) {
          result_65619[i] = nimCopy(result_65619[i], src_65443[i], ti_65444.base);
        }
      }
    
			break;
		case 28:
			      if (src_65443 !== null) {
        result_65619 = src_65443.slice(0);
      }
    
			break;
		default: 
			result_65619 = src_65443;
			break;
		}

	return result_65619;

}

function arrayConstr(len_65761, value_65762, typ_65763) {
		    var result = new Array(len_65761);
    for (var i = 0; i < len_65761; ++i) result[i] = nimCopy(null, value_65762, typ_65763);
    return result;
  

	
}

function cstrToNimstr(c_64290) {
		  var ln = c_64290.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_64290.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_64290.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  return result;
  

	
}

function toJSStr(s_64307) {
		  if (s_64307 === null) return "";
  var len = s_64307.length;
  var asciiPart = new Array(len);
  var fcc = String.fromCharCode;
  var nonAsciiPart = null;
  var nonAsciiOffset = 0;
  for (var i = 0; i < len; ++i) {
    if (nonAsciiPart !== null) {
      var offset = (i - nonAsciiOffset) * 2;
      var code = s_64307[i].toString(16);
      if (code.length == 1) {
        code = "0"+code;
      }
      nonAsciiPart[offset] = "%";
      nonAsciiPart[offset + 1] = code;
    }
    else if (s_64307[i] < 128)
      asciiPart[i] = fcc(s_64307[i]);
    else {
      asciiPart.length = i;
      nonAsciiOffset = i;
      nonAsciiPart = new Array((len - i) * 2);
      --i;
    }
  }
  asciiPart = asciiPart.join("");
  return (nonAsciiPart === null) ?
      asciiPart : asciiPart + decodeURIComponent(nonAsciiPart.join(""));
  

	
}

function raiseException(e_62818, ename_62819) {
		e_62818.name = ename_62819;
		if ((excHandler == 0)) {
		unhandledException(e_62818);
		}
		
		e_62818.trace = nimCopy(null, raw_write_stack_trace_62543(), NTI43040);
		throw e_62818;

	
}

function addInt(a_64603, b_64604) {
		    var result = a_64603 + b_64604;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

	
}

function chckIndx(i_65780, a_65781, b_65782) {
			var Tmp1;

	var result_65783 = 0;

	BeforeRet: do {
			if (!(a_65781 <= i_65780)) Tmp1 = false; else {				Tmp1 = (i_65780 <= b_65782);			}		if (Tmp1) {
		result_65783 = i_65780;
		break BeforeRet;
		}
		else {
		raiseIndexError(i_65780, a_65781, b_65782);
		}
		
	} while (false);

	return result_65783;

}

function subInt(a_64621, b_64622) {
		    var result = a_64621 - b_64622;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

	
}
var ConstSet2 = setConstr([65, 90]);

function chckRange(i_65814, a_65815, b_65816) {
			var Tmp1;

	var result_65817 = 0;

	BeforeRet: do {
			if (!(a_65815 <= i_65814)) Tmp1 = false; else {				Tmp1 = (i_65814 <= b_65816);			}		if (Tmp1) {
		result_65817 = i_65814;
		break BeforeRet;
		}
		else {
		raiseRangeError();
		}
		
	} while (false);

	return result_65817;

}
var ConstSet3 = setConstr(95, 32, 46);
var ConstSet4 = setConstr(95, 32, 46);

function mulInt(a_64639, b_64640) {
		    var result = a_64639 * b_64640;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

	
}
var ConstSet5 = setConstr([97, 122]);
var ConstSet6 = setConstr([65, 90], [97, 122]);
var ConstSet7 = setConstr([97, 122]);
var ConstSet8 = setConstr([65, 90]);

function nimMax(a_64973, b_64974) {
		var Tmp1;

	var result_64975 = 0;

	BeforeRet: do {
		if ((b_64974 <= a_64973)) {
		Tmp1 = a_64973;
		}
		else {
		Tmp1 = b_64974;
		}
		
		result_64975 = Tmp1;
		break BeforeRet;
	} while (false);

	return result_64975;

}

function nimMin(a_64955, b_64956) {
		var Tmp1;

	var result_64957 = 0;

	BeforeRet: do {
		if ((a_64955 <= b_64956)) {
		Tmp1 = a_64955;
		}
		else {
		Tmp1 = b_64956;
		}
		
		result_64957 = Tmp1;
		break BeforeRet;
	} while (false);

	return result_64957;

}
var nim_program_result = 0;
var global_raise_hook_59618 = [null];
var local_raise_hook_59623 = [null];
var out_of_mem_hook_59626 = [null];
  if (!Math.trunc) {
    Math.trunc = function(v) {
      v = +v;
      if (!isFinite(v)) return v;

      return (v - v % 1)   ||   (v < 0 ? -0 : v === 0 ? v : 0);
    };
  }
var alternative_205020 = [null];

function is_fat_pointer_65401(ti_65403) {
	var result_65404 = false;

	BeforeRet: do {
		result_65404 = !((ConstSet1[ti_65403.base.kind] != undefined));
		break BeforeRet;
	} while (false);

	return result_65404;

}

function nimCopyAux(dest_65447, src_65448, n_65450) {
		switch (n_65450.kind) {
		case 0:
			break;
		case 1:
			      dest_65447[n_65450.offset] = nimCopy(dest_65447[n_65450.offset], src_65448[n_65450.offset], n_65450.typ);
    
			break;
		case 2:
			    for (var i = 0; i < n_65450.sons.length; i++) {
      nimCopyAux(dest_65447, src_65448, n_65450.sons[i]);
    }
    
			break;
		case 3:
			      dest_65447[n_65450.offset] = nimCopy(dest_65447[n_65450.offset], src_65448[n_65450.offset], n_65450.typ);
      for (var i = 0; i < n_65450.sons.length; ++i) {
        nimCopyAux(dest_65447, src_65448, n_65450.sons[i][1]);
      }
    
			break;
		}

	
}

function add_59638(x_59641, x_59641_Idx, y_59642) {
		      if (x_59641[x_59641_Idx] === null) { x_59641[x_59641_Idx] = []; }
      var off = x_59641[x_59641_Idx].length;
      x_59641[x_59641_Idx].length += y_59642.length;
      for (var i = 0; i < y_59642.length; ++i) {
        x_59641[x_59641_Idx][off+i] = y_59642.charCodeAt(i);
      }
    

	
}

function aux_write_stack_trace_62226(f_62228) {
					var Tmp3;

	var result_62229 = [null];

		var it_62237 = f_62228;
		var i_62239 = 0;
		var total_62241 = 0;
		var temp_frames_62248 = arrayConstr(64, {Field0: null, Field1: 0}, NTI62231);
		L1: do {
				L2: while (true) {
					if (!!((it_62237 == null))) Tmp3 = false; else {						Tmp3 = (i_62239 <= 63);					}				if (!Tmp3) break L2;
					temp_frames_62248[i_62239].Field0 = it_62237.procname;
					temp_frames_62248[i_62239].Field1 = it_62237.line;
					i_62239 += 1;
					total_62241 += 1;
					it_62237 = it_62237.prev;
				}
		} while(false);
		L4: do {
				L5: while (true) {
				if (!!((it_62237 == null))) break L5;
					total_62241 += 1;
					it_62237 = it_62237.prev;
				}
		} while(false);
		result_62229[0] = nimCopy(null, [], NTI43040);
		if (!((total_62241 == i_62239))) {
		if (result_62229[0] != null) { result_62229[0] = (result_62229[0]).concat(makeNimstrLit("(")); } else { result_62229[0] = makeNimstrLit("("); };
		if (result_62229[0] != null) { result_62229[0] = (result_62229[0]).concat(cstrToNimstr(((total_62241 - i_62239))+"")); } else { result_62229[0] = cstrToNimstr(((total_62241 - i_62239))+"").slice(); };
		if (result_62229[0] != null) { result_62229[0] = (result_62229[0]).concat(makeNimstrLit(" calls omitted) ...\x0A")); } else { result_62229[0] = makeNimstrLit(" calls omitted) ...\x0A"); };
		}
		
		L6: do {
			var j_62421 = 0;
			var colontmp__205206 = 0;
			colontmp__205206 = (i_62239 - 1);
			var res_205211 = colontmp__205206;
			L7: do {
					L8: while (true) {
					if (!(0 <= res_205211)) break L8;
						j_62421 = res_205211;
						add_59638(result_62229, 0, temp_frames_62248[j_62421].Field0);
						if ((0 < temp_frames_62248[j_62421].Field1)) {
						if (result_62229[0] != null) { result_62229[0] = (result_62229[0]).concat(makeNimstrLit(", line: ")); } else { result_62229[0] = makeNimstrLit(", line: "); };
						if (result_62229[0] != null) { result_62229[0] = (result_62229[0]).concat(cstrToNimstr((temp_frames_62248[j_62421].Field1)+"")); } else { result_62229[0] = cstrToNimstr((temp_frames_62248[j_62421].Field1)+"").slice(); };
						}
						
						if (result_62229[0] != null) { result_62229[0] = (result_62229[0]).concat(makeNimstrLit("\x0A")); } else { result_62229[0] = makeNimstrLit("\x0A"); };
						res_205211 -= 1;
					}
			} while(false);
		} while(false);

	return result_62229[0];

}

function raw_write_stack_trace_62543() {
	var result_62545 = null;

		if (!((framePtr == null))) {
		result_62545 = nimCopy(null, (makeNimstrLit("Traceback (most recent call last)\x0A") || []).concat(aux_write_stack_trace_62226(framePtr) || []), NTI43040);
		}
		else {
			result_62545 = nimCopy(null, makeNimstrLit("No stack traceback available\x0A"), NTI43040);
		}
		

	return result_62545;

}

function unhandledException(e_62634) {
		var buf_62635 = [[]];
		if (!(((e_62634.message != null ? e_62634.message.length : 0) == 0))) {
		if (buf_62635[0] != null) { buf_62635[0] = (buf_62635[0]).concat(makeNimstrLit("Error: unhandled exception: ")); } else { buf_62635[0] = makeNimstrLit("Error: unhandled exception: "); };
		if (buf_62635[0] != null) { buf_62635[0] = (buf_62635[0]).concat(e_62634.message); } else { buf_62635[0] = e_62634.message.slice(); };
		}
		else {
		if (buf_62635[0] != null) { buf_62635[0] = (buf_62635[0]).concat(makeNimstrLit("Error: unhandled exception")); } else { buf_62635[0] = makeNimstrLit("Error: unhandled exception"); };
		}
		
		if (buf_62635[0] != null) { buf_62635[0] = (buf_62635[0]).concat(makeNimstrLit(" [")); } else { buf_62635[0] = makeNimstrLit(" ["); };
		add_59638(buf_62635, 0, e_62634.name);
		if (buf_62635[0] != null) { buf_62635[0] = (buf_62635[0]).concat(makeNimstrLit("]\x0A")); } else { buf_62635[0] = makeNimstrLit("]\x0A"); };
		if (buf_62635[0] != null) { buf_62635[0] = (buf_62635[0]).concat(raw_write_stack_trace_62543()); } else { buf_62635[0] = raw_write_stack_trace_62543().slice(); };
		var cbuf_62801 = toJSStr(buf_62635[0]);
		framePtr = null;
		  if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_62801);
  }
  else {
    throw cbuf_62801;
  }
  

	
}

function raiseOverflow() {
		var e_63261 = null;
		e_63261 = {m_type: NTI46846, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		e_63261.message = nimCopy(null, makeNimstrLit("over- or underflow"), NTI43040);
		e_63261.parent = null;
		raiseException(e_63261, "OverflowError");

	
}

function is_whitespace_204144(text_204146) {
		     return !/[^\s]/.test(text_204146);
  

	
}

function is_whitespace_204161(x_204163) {
		var Tmp1;
		var Tmp2;

	var result_204164 = false;

	var F={procname:"dochack.isWhitespace",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
		F.line = 134;
		if (!(x_204163.nodeName == "#text")) Tmp2 = false; else {			Tmp2 = is_whitespace_204144(x_204163.textContent);		}		if (Tmp2) Tmp1 = true; else {			Tmp1 = (x_204163.nodeName == "#comment");		}		result_204164 = Tmp1;
	framePtr = F.prev;

	return result_204164;

}

function raiseIndexError(i_63858, a_63859, b_63860) {
		var e_63864 = null;
		e_63864 = {m_type: NTI46858, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		e_63864.message = nimCopy(null, (makeNimstrLit("index ") || []).concat(cstrToNimstr((i_63858)+"") || [],makeNimstrLit(" not in ") || [],cstrToNimstr((a_63859)+"") || [],makeNimstrLit(" .. ") || [],cstrToNimstr((b_63860)+"") || []), NTI43040);
		e_63864.parent = null;
		raiseException(e_63864, "IndexError");

	
}

function to_toc_204178(x_204180, father_204181) {
								var Tmp5;
						var Tmp6;
						var Tmp7;
						var Tmp8;
			var Tmp15;

	var F={procname:"dochack.toToc",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
		if ((x_204180.nodeName == "UL")) {
		F.line = 139;
		var f_204200 = {heading: null, kids: [], sortId: (father_204181.kids != null ? father_204181.kids.length : 0), doSort: false};
		F.line = 140;
		var i_204202 = 0;
		L1: do {
			F.line = 141;
				L2: while (true) {
				if (!(i_204202 < x_204180.childNodes.length)) break L2;
					F.line = 142;
					var nxt_204203 = addInt(i_204202, 1);
					L3: do {
						F.line = 143;
							L4: while (true) {
								if (!(nxt_204203 < x_204180.childNodes.length)) Tmp5 = false; else {									Tmp5 = is_whitespace_204161(x_204180.childNodes[nxt_204203]);								}							if (!Tmp5) break L4;
								F.line = 144;
								nxt_204203 = addInt(nxt_204203, 1);
							}
					} while(false);
						if (!(nxt_204203 < x_204180.childNodes.length)) Tmp8 = false; else {							Tmp8 = (x_204180.childNodes[i_204202].nodeName == "LI");						}						if (!Tmp8) Tmp7 = false; else {							Tmp7 = (x_204180.childNodes[i_204202].childNodes.length == 1);						}						if (!Tmp7) Tmp6 = false; else {							Tmp6 = (x_204180.childNodes[nxt_204203].nodeName == "UL");						}					if (Tmp6) {
					F.line = 147;
					var e_204228 = {heading: x_204180.childNodes[i_204202].childNodes[0], kids: [], sortId: (f_204200.kids != null ? f_204200.kids.length : 0), doSort: false};
					F.line = 148;
					var it_204229 = x_204180.childNodes[nxt_204203];
					L9: do {
						F.line = 149;
						var j_204236 = 0;
						F.line = 2631;
						var colontmp__205182 = 0;
						F.line = 149;
						colontmp__205182 = it_204229.childNodes.length;
						F.line = 2632;
						var i_205183 = 0;
						L10: do {
							F.line = 2633;
								L11: while (true) {
								if (!(i_205183 < colontmp__205182)) break L11;
									F.line = 149;
									j_204236 = i_205183;
									F.line = 150;
									to_toc_204178(it_204229.childNodes[j_204236], e_204228);
									F.line = 2635;
									i_205183 = addInt(i_205183, 1);
								}
						} while(false);
					} while(false);
					F.line = 151;
					if (f_204200.kids != null) { f_204200.kids.push(e_204228); } else { f_204200.kids = [e_204228]; };
					F.line = 152;
					i_204202 = addInt(nxt_204203, 1);
					}
					else {
						F.line = 154;
						to_toc_204178(x_204180.childNodes[i_204202], f_204200);
						F.line = 155;
						i_204202 = addInt(i_204202, 1);
					}
					
				}
		} while(false);
		F.line = 156;
		if (father_204181.kids != null) { father_204181.kids.push(f_204200); } else { father_204181.kids = [f_204200]; };
		}
		else {
		if (is_whitespace_204161(x_204180)) {
		}
		else {
		if ((x_204180.nodeName == "LI")) {
		F.line = 160;
		var idx_204271 = [];
		L12: do {
			F.line = 161;
			var i_204278 = 0;
			F.line = 2631;
			var colontmp__205187 = 0;
			F.line = 161;
			colontmp__205187 = x_204180.childNodes.length;
			F.line = 2632;
			var i_205188 = 0;
			L13: do {
				F.line = 2633;
					L14: while (true) {
					if (!(i_205188 < colontmp__205187)) break L14;
						F.line = 161;
						i_204278 = i_205188;
						if (!(is_whitespace_204161(x_204180.childNodes[i_204278]))) {
						F.line = 162;
						if (idx_204271 != null) { idx_204271.push(i_204278); } else { idx_204271 = [i_204278]; };
						}
						
						F.line = 2635;
						i_205188 = addInt(i_205188, 1);
					}
			} while(false);
		} while(false);
			if (!((idx_204271 != null ? idx_204271.length : 0) == 2)) Tmp15 = false; else {				Tmp15 = (x_204180.childNodes[idx_204271[chckIndx(1, 0, idx_204271.length+0-1)-0]].nodeName == "UL");			}		if (Tmp15) {
		F.line = 164;
		var e_204309 = {heading: x_204180.childNodes[idx_204271[chckIndx(0, 0, idx_204271.length+0-1)-0]], kids: [], sortId: (father_204181.kids != null ? father_204181.kids.length : 0), doSort: false};
		F.line = 166;
		var it_204310 = x_204180.childNodes[idx_204271[chckIndx(1, 0, idx_204271.length+0-1)-0]];
		L16: do {
			F.line = 167;
			var j_204317 = 0;
			F.line = 2631;
			var colontmp__205193 = 0;
			F.line = 167;
			colontmp__205193 = it_204310.childNodes.length;
			F.line = 2632;
			var i_205194 = 0;
			L17: do {
				F.line = 2633;
					L18: while (true) {
					if (!(i_205194 < colontmp__205193)) break L18;
						F.line = 167;
						j_204317 = i_205194;
						F.line = 168;
						to_toc_204178(it_204310.childNodes[j_204317], e_204309);
						F.line = 2635;
						i_205194 = addInt(i_205194, 1);
					}
			} while(false);
		} while(false);
		F.line = 169;
		if (father_204181.kids != null) { father_204181.kids.push(e_204309); } else { father_204181.kids = [e_204309]; };
		}
		else {
			L19: do {
				F.line = 171;
				var i_204331 = 0;
				F.line = 2631;
				var colontmp__205198 = 0;
				F.line = 171;
				colontmp__205198 = x_204180.childNodes.length;
				F.line = 2632;
				var i_205199 = 0;
				L20: do {
					F.line = 2633;
						L21: while (true) {
						if (!(i_205199 < colontmp__205198)) break L21;
							F.line = 171;
							i_204331 = i_205199;
							F.line = 172;
							to_toc_204178(x_204180.childNodes[i_204331], father_204181);
							F.line = 2635;
							i_205199 = addInt(i_205199, 1);
						}
				} while(false);
			} while(false);
		}
		
		}
		else {
			F.line = 174;
		if (father_204181.kids != null) { father_204181.kids.push({heading: x_204180, kids: [], sortId: (father_204181.kids != null ? father_204181.kids.length : 0), doSort: false}); } else { father_204181.kids = [{heading: x_204180, kids: [], sortId: (father_204181.kids != null ? father_204181.kids.length : 0), doSort: false}]; };
		}
		}}
	framePtr = F.prev;

	
}

function extract_items_203577(x_203579, heading_203580, items_203583, items_203583_Idx) {
			var Tmp1;

	var F={procname:"dochack.extractItems",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if ((x_203579 == null)) {
		F.line = 81;
		break BeforeRet;
		}
		
			if (!!((x_203579.heading == null))) Tmp1 = false; else {				Tmp1 = (x_203579.heading.textContent == heading_203580);			}		if (Tmp1) {
		L2: do {
			F.line = 83;
			var i_203611 = 0;
			F.line = 2631;
			var colontmp__205223 = 0;
			F.line = 83;
			colontmp__205223 = (x_203579.kids != null ? x_203579.kids.length : 0);
			F.line = 2632;
			var i_205224 = 0;
			L3: do {
				F.line = 2633;
					L4: while (true) {
					if (!(i_205224 < colontmp__205223)) break L4;
						F.line = 83;
						i_203611 = i_205224;
						F.line = 84;
						if (items_203583[items_203583_Idx] != null) { items_203583[items_203583_Idx].push(x_203579.kids[chckIndx(i_203611, 0, x_203579.kids.length+0-1)-0].heading); } else { items_203583[items_203583_Idx] = [x_203579.kids[chckIndx(i_203611, 0, x_203579.kids.length+0-1)-0].heading]; };
						F.line = 2635;
						i_205224 = addInt(i_205224, 1);
					}
			} while(false);
		} while(false);
		}
		else {
			L5: do {
				F.line = 86;
				var i_203630 = 0;
				F.line = 2631;
				var colontmp__205228 = 0;
				F.line = 86;
				colontmp__205228 = (x_203579.kids != null ? x_203579.kids.length : 0);
				F.line = 2632;
				var i_205229 = 0;
				L6: do {
					F.line = 2633;
						L7: while (true) {
						if (!(i_205229 < colontmp__205228)) break L7;
							F.line = 86;
							i_203630 = i_205229;
							F.line = 87;
							var it_203631 = x_203579.kids[chckIndx(i_203630, 0, x_203579.kids.length+0-1)-0];
							F.line = 88;
							extract_items_203577(it_203631, heading_203580, items_203583, items_203583_Idx);
							F.line = 2635;
							i_205229 = addInt(i_205229, 1);
						}
				} while(false);
			} while(false);
		}
		
	} while (false);
	framePtr = F.prev;

	
}

function tree_203020(tag_203022, kids_203024) {
	var result_203025 = null;

	var F={procname:"dochack.tree",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
		F.line = 11;
		result_203025 = document.createElement(toJSStr(tag_203022));
		L1: do {
			F.line = 12;
			var k_203071 = null;
			F.line = 3;
			var i_205246 = 0;
			L2: do {
				F.line = 4;
					L3: while (true) {
					if (!(i_205246 < (kids_203024 != null ? kids_203024.length : 0))) break L3;
						F.line = 12;
						k_203071 = kids_203024[chckIndx(i_205246, 0, kids_203024.length+0-1)-0];
						F.line = 13;
						result_203025.appendChild(k_203071);
						F.line = 6;
						i_205246 = addInt(i_205246, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_203025;

}

function text_203227(s_203229) {
	var result_203230 = null;

	var F={procname:"dochack.text",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
		F.line = 27;
		result_203230 = document.createTextNode(s_203229);
	framePtr = F.prev;

	return result_203230;

}

function sys_fatal_57107(message_57111) {
	var F={procname:"sysFatal.sysFatal",prev:framePtr,filename:"../../lib/system/fatal.nim",line:0};
	framePtr = F;
		F.line = 32;
		var e_57207 = null;
		F.line = 35;
		e_57207 = {m_type: NTI46850, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		F.line = 36;
		e_57207.message = nimCopy(null, message_57111, NTI43040);
		F.line = 37;
		raiseException(e_57207, "AssertionError");
	framePtr = F.prev;

	
}

function raise_assert_57103(msg_57105) {
	var F={procname:"assertions.raiseAssert",prev:framePtr,filename:"../../lib/system/assertions.nim",line:0};
	framePtr = F;
		F.line = 20;
		sys_fatal_57107(msg_57105);
	framePtr = F.prev;

	
}

function failed_assert_impl_57270(msg_57272) {
	var F={procname:"assertions.failedAssertImpl",prev:framePtr,filename:"../../lib/system/assertions.nim",line:0};
	framePtr = F;
		F.line = 27;
		raise_assert_57103(msg_57272);
	framePtr = F.prev;

	
}

function uncovered_204500(x_204502) {
			var Tmp1;
		var Tmp2;

	var result_204503 = null;

	var F={procname:"dochack.uncovered",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
	BeforeRet: do {
			if (!((x_204502.kids != null ? x_204502.kids.length : 0) == 0)) Tmp1 = false; else {				Tmp1 = !((x_204502.heading == null));			}		if (Tmp1) {
		F.line = 194;
		if (!(x_204502.heading.hasOwnProperty('__karaxMarker__'))) {
		Tmp2 = x_204502;
		}
		else {
		Tmp2 = null;
		}
		
		result_204503 = Tmp2;
		break BeforeRet;
		}
		
		F.line = 195;
		result_204503 = {heading: x_204502.heading, kids: [], sortId: x_204502.sortId, doSort: x_204502.doSort};
		L3: do {
			F.line = 197;
			var i_204541 = 0;
			F.line = 2631;
			var colontmp__205258 = 0;
			F.line = 197;
			colontmp__205258 = (x_204502.kids != null ? x_204502.kids.length : 0);
			F.line = 2632;
			var i_205259 = 0;
			L4: do {
				F.line = 2633;
					L5: while (true) {
					if (!(i_205259 < colontmp__205258)) break L5;
						F.line = 197;
						i_204541 = i_205259;
						F.line = 198;
						var y_204542 = uncovered_204500(x_204502.kids[chckIndx(i_204541, 0, x_204502.kids.length+0-1)-0]);
						if (!((y_204542 == null))) {
						F.line = 199;
						if (result_204503.kids != null) { result_204503.kids.push(y_204542); } else { result_204503.kids = [y_204542]; };
						}
						
						F.line = 2635;
						i_205259 = addInt(i_205259, 1);
					}
			} while(false);
		} while(false);
		if (((result_204503.kids != null ? result_204503.kids.length : 0) == 0)) {
		F.line = 200;
		result_204503 = null;
		}
		
	} while (false);
	framePtr = F.prev;

	return result_204503;

}

function merge_tocs_204591(orig_204593, news_204594) {
	var result_204595 = null;

	var F={procname:"dochack.mergeTocs",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
		F.line = 203;
		result_204595 = uncovered_204500(orig_204593);
		if ((result_204595 == null)) {
		F.line = 205;
		result_204595 = news_204594;
		}
		else {
			L1: do {
				F.line = 207;
				var i_204615 = 0;
				F.line = 2631;
				var colontmp__205252 = 0;
				F.line = 207;
				colontmp__205252 = (news_204594.kids != null ? news_204594.kids.length : 0);
				F.line = 2632;
				var i_205253 = 0;
				L2: do {
					F.line = 2633;
						L3: while (true) {
						if (!(i_205253 < colontmp__205252)) break L3;
							F.line = 207;
							i_204615 = i_205253;
							F.line = 208;
							if (result_204595.kids != null) { result_204595.kids.push(news_204594.kids[chckIndx(i_204615, 0, news_204594.kids.length+0-1)-0]); } else { result_204595.kids = [news_204594.kids[chckIndx(i_204615, 0, news_204594.kids.length+0-1)-0]]; };
							F.line = 2635;
							i_205253 = addInt(i_205253, 1);
						}
				} while(false);
			} while(false);
		}
		
	framePtr = F.prev;

	return result_204595;

}

function build_toc_204636(orig_204638, types_204640, procs_204641) {
	var result_204642 = null;

	var F={procname:"dochack.buildToc",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
		F.line = 211;
		var new_stuff_204656 = {heading: null, kids: [], doSort: true, sortId: 0};
		L1: do {
			F.line = 212;
			var t_204829 = null;
			F.line = 156;
			var i_205241 = 0;
			F.line = 157;
			var l_205242 = (types_204640 != null ? types_204640.length : 0);
			L2: do {
				F.line = 158;
					L3: while (true) {
					if (!(i_205241 < l_205242)) break L3;
						F.line = 212;
						t_204829 = types_204640[chckIndx(i_205241, 0, types_204640.length+0-1)-0];
						F.line = 213;
						var c_204843 = {heading: t_204829.cloneNode(true), kids: [], doSort: true, sortId: 0};
						F.line = 214;
						t_204829.__karaxMarker__ = true;
						L4: do {
							F.line = 215;
							var p_204850 = null;
							F.line = 156;
							var i_205238 = 0;
							F.line = 157;
							var l_205239 = (procs_204641 != null ? procs_204641.length : 0);
							L5: do {
								F.line = 158;
									L6: while (true) {
									if (!(i_205238 < l_205239)) break L6;
										F.line = 215;
										p_204850 = procs_204641[chckIndx(i_205238, 0, procs_204641.length+0-1)-0];
										if (!(p_204850.hasOwnProperty('__karaxMarker__'))) {
										F.line = 217;
										var xx_204851 = p_204850.parentNode.getElementsByClassName("attachedType");
										if ((((xx_204851 != null ? xx_204851.length : 0) == 1) && (xx_204851[chckIndx(0, 0, xx_204851.length+0-1)-0].textContent == t_204829.textContent))) {
										F.line = 220;
										var q_204859 = tree_203020(makeNimstrLit("A"), [text_203227(p_204850.title)]);
										F.line = 221;
										q_204859.setAttribute("href", p_204850.getAttribute("href"));
										F.line = 222;
										if (c_204843.kids != null) { c_204843.kids.push({heading: q_204859, kids: [], sortId: 0, doSort: false}); } else { c_204843.kids = [{heading: q_204859, kids: [], sortId: 0, doSort: false}]; };
										F.line = 223;
										p_204850.__karaxMarker__ = true;
										}
										
										}
										
										F.line = 160;
										i_205238 = addInt(i_205238, 1);
										if (!(((procs_204641 != null ? procs_204641.length : 0) == l_205239))) {
										F.line = 161;
										failed_assert_impl_57270(makeNimstrLit("/Users/travis/build/nim-lang/Nim/lib/system/iterators.nim(161, 11) `len(a) == L` seq modified while iterating over it"));
										}
										
									}
							} while(false);
						} while(false);
						F.line = 224;
						if (new_stuff_204656.kids != null) { new_stuff_204656.kids.push(c_204843); } else { new_stuff_204656.kids = [c_204843]; };
						F.line = 160;
						i_205241 = addInt(i_205241, 1);
						if (!(((types_204640 != null ? types_204640.length : 0) == l_205242))) {
						F.line = 161;
						failed_assert_impl_57270(makeNimstrLit("/Users/travis/build/nim-lang/Nim/lib/system/iterators.nim(161, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 225;
		result_204642 = merge_tocs_204591(orig_204638, new_stuff_204656);
	framePtr = F.prev;

	return result_204642;

}

function add_203145(parent_203147, kid_203148) {
			var Tmp1;
				var Tmp2;

	var F={procname:"dochack.add",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
			if (!(parent_203147.nodeName == "TR")) Tmp1 = false; else {				if ((kid_203148.nodeName == "TD")) Tmp2 = true; else {					Tmp2 = (kid_203148.nodeName == "TH");				}				Tmp1 = Tmp2;			}		if (Tmp1) {
		F.line = 18;
		var k_203149 = document.createElement("TD");
		F.line = 19;
		k_203149.appendChild(kid_203148);
		F.line = 20;
		parent_203147.appendChild(k_203149);
		}
		else {
			F.line = 22;
		parent_203147.appendChild(kid_203148);
		}
		
	framePtr = F.prev;

	
}

function set_class_203163(e_203165, value_203166) {
	var F={procname:"dochack.setClass",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
		F.line = 25;
		e_203165.setAttribute("class", toJSStr(value_203166));
	framePtr = F.prev;

	
}

function to_html_203705(x_203707, is_root_203708) {
			var Tmp1;

		function HEX3Aanonymous_203748(a_203750, b_203751) {
					var Tmp1;

			var result_203752 = 0;

			var F={procname:"toHtml.:anonymous",prev:framePtr,filename:"dochack.nim",line:0};
			framePtr = F;
			BeforeRet: do {
					if (!!((a_203750.heading == null))) Tmp1 = false; else {						Tmp1 = !((b_203751.heading == null));					}				if (Tmp1) {
				F.line = 106;
				var x_203769 = a_203750.heading.textContent;
				F.line = 107;
				var y_203770 = b_203751.heading.textContent;
				if ((x_203769 < y_203770)) {
				F.line = 108;
				result_203752 = -1;
				break BeforeRet;
				}
				
				if ((y_203770 < x_203769)) {
				F.line = 109;
				result_203752 = 1;
				break BeforeRet;
				}
				
				F.line = 110;
				result_203752 = 0;
				break BeforeRet;
				}
				else {
					F.line = 113;
					result_203752 = subInt(a_203750.sortId, b_203751.sortId);
					break BeforeRet;
				}
				
			} while (false);
			framePtr = F.prev;

			return result_203752;

		}

	var result_203709 = null;

	var F={procname:"dochack.toHtml",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if ((x_203707 == null)) {
		F.line = 91;
		result_203709 = null;
		break BeforeRet;
		}
		
		if (((x_203707.kids != null ? x_203707.kids.length : 0) == 0)) {
		if ((x_203707.heading == null)) {
		F.line = 93;
		result_203709 = null;
		break BeforeRet;
		}
		
		F.line = 94;
		result_203709 = x_203707.heading.cloneNode(true);
		break BeforeRet;
		}
		
		F.line = 95;
		result_203709 = tree_203020(makeNimstrLit("DIV"), []);
			if (!!((x_203707.heading == null))) Tmp1 = false; else {				Tmp1 = !(x_203707.heading.hasOwnProperty('__karaxMarker__'));			}		if (Tmp1) {
		F.line = 97;
		add_203145(result_203709, x_203707.heading.cloneNode(true));
		}
		
		F.line = 98;
		var ul_203745 = tree_203020(makeNimstrLit("UL"), []);
		if (is_root_203708) {
		F.line = 100;
		set_class_203163(ul_203745, makeNimstrLit("simple simple-toc"));
		}
		else {
			F.line = 102;
		set_class_203163(ul_203745, makeNimstrLit("simple"));
		}
		
		if (x_203707.doSort) {
		F.line = 104;
		x_203707.kids.sort(HEX3Aanonymous_203748);
		}
		
		L2: do {
			F.line = 115;
			var k_204014 = null;
			F.line = 154;
			var colontmp__205265 = null;
			F.line = 115;
			colontmp__205265 = x_203707.kids;
			F.line = 156;
			var i_205267 = 0;
			F.line = 157;
			var l_205268 = (colontmp__205265 != null ? colontmp__205265.length : 0);
			L3: do {
				F.line = 158;
					L4: while (true) {
					if (!(i_205267 < l_205268)) break L4;
						F.line = 115;
						k_204014 = colontmp__205265[chckIndx(i_205267, 0, colontmp__205265.length+0-1)-0];
						F.line = 116;
						var y_204015 = to_html_203705(k_204014, false);
						if (!((y_204015 == null))) {
						F.line = 118;
						add_203145(ul_203745, tree_203020(makeNimstrLit("LI"), [y_204015]));
						}
						
						F.line = 160;
						i_205267 = addInt(i_205267, 1);
						if (!(((colontmp__205265 != null ? colontmp__205265.length : 0) == l_205268))) {
						F.line = 161;
						failed_assert_impl_57270(makeNimstrLit("/Users/travis/build/nim-lang/Nim/lib/system/iterators.nim(161, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		if (!((ul_203745.childNodes.length == 0))) {
		F.line = 119;
		add_203145(result_203709, ul_203745);
		}
		
		if ((result_203709.childNodes.length == 0)) {
		F.line = 120;
		result_203709 = null;
		}
		
	} while (false);
	framePtr = F.prev;

	return result_203709;

}

function replace_by_id_203247(id_203249, new_tree_203250) {
	var F={procname:"dochack.replaceById",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
		F.line = 32;
		var x_203251 = document.getElementById(id_203249);
		F.line = 33;
		x_203251.parentNode.replaceChild(new_tree_203250, x_203251);
		F.line = 34;
		new_tree_203250.id = id_203249;
	framePtr = F.prev;

	
}

function togglevis_205034(d_205036) {
	var F={procname:"dochack.togglevis",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
		F.line = 230;
		    if (d_205036.style.display == 'none')
      d_205036.style.display = 'inline';
    else
      d_205036.style.display = 'none';
  
	framePtr = F.prev;

	
}

function groupBy(value_205052) {
	var F={procname:"dochack.groupBy",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
		F.line = 238;
		var toc_205053 = document.getElementById("toc-list");
		if ((alternative_205020[0] == null)) {
		F.line = 240;
		var tt_205072 = {heading: null, kids: [], sortId: 0, doSort: false};
		F.line = 241;
		to_toc_204178(toc_205053, tt_205072);
		F.line = 242;
		tt_205072 = tt_205072.kids[chckIndx(0, 0, tt_205072.kids.length+0-1)-0];
		F.line = 244;
		var types_205087 = [[]];
		F.line = 245;
		var procs_205102 = [[]];
		F.line = 247;
		extract_items_203577(tt_205072, "Types", types_205087, 0);
		F.line = 248;
		extract_items_203577(tt_205072, "Procs", procs_205102, 0);
		F.line = 249;
		extract_items_203577(tt_205072, "Converters", procs_205102, 0);
		F.line = 250;
		extract_items_203577(tt_205072, "Methods", procs_205102, 0);
		F.line = 251;
		extract_items_203577(tt_205072, "Templates", procs_205102, 0);
		F.line = 252;
		extract_items_203577(tt_205072, "Macros", procs_205102, 0);
		F.line = 253;
		extract_items_203577(tt_205072, "Iterators", procs_205102, 0);
		F.line = 255;
		var ntoc_205110 = build_toc_204636(tt_205072, types_205087[0], procs_205102[0]);
		F.line = 256;
		var x_205111 = to_html_203705(ntoc_205110, true);
		F.line = 257;
		alternative_205020[0] = tree_203020(makeNimstrLit("DIV"), [x_205111]);
		}
		
		if ((value_205052 == "type")) {
		F.line = 259;
		replace_by_id_203247("tocRoot", alternative_205020[0]);
		}
		else {
			F.line = 261;
		replace_by_id_203247("tocRoot", tree_203020(makeNimstrLit("DIV"), []));
		}
		
		F.line = 262;
		togglevis_205034(document.getElementById("toc-list"));
	framePtr = F.prev;

	
}
var db_205271 = [null];
var contents_205273 = [null];
var oldtoc_205677 = [null];
var timer_205678 = [null];

function raiseRangeError() {
		var e_63660 = null;
		e_63660 = {m_type: NTI46862, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		e_63660.message = nimCopy(null, makeNimstrLit("value out of range"), NTI43040);
		e_63660.parent = null;
		raiseException(e_63660, "RangeError");

	
}

function nsuToLowerAsciiChar(c_190980) {
	var result_190981 = 0;

	var F={procname:"strutils.toLowerAscii",prev:framePtr,filename:"../../lib/pure/strutils.nim",line:0};
	framePtr = F;
		if ((ConstSet2[c_190980] != undefined)) {
		F.line = 222;
		result_190981 = chckRange(addInt(c_190980, 32), 0, 255);
		}
		else {
			F.line = 224;
			result_190981 = c_190980;
		}
		
	framePtr = F.prev;

	return result_190981;

}

function fuzzy_match_202070(pattern_202072, str_202073) {
							var Tmp4;
							var Tmp5;
								var Tmp6;

	var result_202077 = {Field0: 0, Field1: false};

	var F={procname:"fuzzysearch.fuzzyMatch",prev:framePtr,filename:"fuzzysearch.nim",line:0};
	framePtr = F;
		F.line = 37;
		var score_state_202078 = -100;
		F.line = 38;
		var header_matched_202079 = false;
		F.line = 39;
		var unmatched_leading_char_count_202081 = 0;
		F.line = 40;
		var consecutive_match_count_202083 = 0;
		F.line = 41;
		var str_index_202085 = 0;
		F.line = 42;
		var pat_index_202087 = 0;
		F.line = 43;
		var score_202089 = 0;
		L1: do {
			F.line = 49;
				L2: while (true) {
				if (!((str_index_202085 < (str_202073 != null ? str_202073.length : 0)) && (pat_index_202087 < (pattern_202072 != null ? pattern_202072.length : 0)))) break L2;
					L3: do {
						F.line = 51;
						var pattern_char_202096 = nsuToLowerAsciiChar(pattern_202072.charCodeAt(chckIndx(pat_index_202087, 0, pattern_202072.length+0-1)-0));
						F.line = 52;
						var str_char_202097 = nsuToLowerAsciiChar(str_202073.charCodeAt(chckIndx(str_index_202085, 0, str_202073.length+0-1)-0));
						if ((ConstSet3[pattern_char_202096] != undefined)) {
						F.line = 56;
						pat_index_202087 = addInt(pat_index_202087, 1);
						F.line = 57;
						break L3;
						}
						
						if ((ConstSet4[str_char_202097] != undefined)) {
						F.line = 59;
						str_index_202085 = addInt(str_index_202085, 1);
						F.line = 60;
						break L3;
						}
						
						if ((!(header_matched_202079) && (str_char_202097 == 58))) {
						F.line = 65;
						header_matched_202079 = true;
						F.line = 66;
						score_state_202078 = -100;
						F.line = 67;
						score_202089 = Math.trunc(Math.floor((5.0000000000000000e-01 * score_202089)));
						F.line = 68;
						pat_index_202087 = 0;
						F.line = 69;
						str_index_202085 = addInt(str_index_202085, 1);
						F.line = 70;
						break L3;
						}
						
						if ((str_char_202097 == pattern_char_202096)) {
						F.line = 73;
						switch (score_state_202078) {
						case -100:
						case 20:
							F.line = 75;
							score_state_202078 = 10;
							break;
						case 0:
							F.line = 78;
							score_state_202078 = 5;
							F.line = 78;
							score_202089 = addInt(score_202089, score_state_202078);
							break;
						case 10:
						case 5:
							F.line = 81;
							consecutive_match_count_202083 = addInt(consecutive_match_count_202083, 1);
							F.line = 82;
							score_state_202078 = 5;
							F.line = 83;
							score_202089 = addInt(score_202089, mulInt(5, consecutive_match_count_202083));
							if ((score_state_202078 == 10)) {
							F.line = 86;
							score_202089 = addInt(score_202089, 10);
							}
							
							F.line = 88;
							var on_boundary_202172 = (pat_index_202087 == (pattern_202072 != null ? (pattern_202072.length-1) : -1));
							if ((!(on_boundary_202172) && (str_index_202085 < (str_202073 != null ? (str_202073.length-1) : -1)))) {
							F.line = 91;
							var next_pattern_char_202173 = nsuToLowerAsciiChar(pattern_202072.charCodeAt(chckIndx(addInt(pat_index_202087, 1), 0, pattern_202072.length+0-1)-0));
							F.line = 92;
							var next_str_char_202174 = nsuToLowerAsciiChar(str_202073.charCodeAt(chckIndx(addInt(str_index_202085, 1), 0, str_202073.length+0-1)-0));
							F.line = 95;
							if (!!((ConstSet5[next_str_char_202174] != undefined))) Tmp4 = false; else {								Tmp4 = !((next_str_char_202174 == next_pattern_char_202173));							}							on_boundary_202172 = Tmp4;
							}
							
							if (on_boundary_202172) {
							F.line = 100;
							score_state_202078 = 20;
							F.line = 100;
							score_202089 = addInt(score_202089, score_state_202078);
							}
							
							break;
						case -1:
						case -3:
							F.line = 103;
							if (!((ConstSet6[str_202073.charCodeAt(chckIndx(subInt(str_index_202085, 1), 0, str_202073.length+0-1)-0)] != undefined))) Tmp5 = true; else {								if (!(ConstSet7[str_202073.charCodeAt(chckIndx(subInt(str_index_202085, 1), 0, str_202073.length+0-1)-0)] != undefined)) Tmp6 = false; else {									Tmp6 = (ConstSet8[str_202073.charCodeAt(chckIndx(str_index_202085, 0, str_202073.length+0-1)-0)] != undefined);								}								Tmp5 = Tmp6;							}							var is_leading_char_202212 = Tmp5;
							if (is_leading_char_202212) {
							F.line = 110;
							score_state_202078 = 10;
							}
							else {
								F.line = 114;
								score_state_202078 = 0;
								F.line = 114;
								score_202089 = addInt(score_202089, score_state_202078);
							}
							
							break;
						}
						F.line = 115;
						pat_index_202087 = addInt(pat_index_202087, 1);
						}
						else {
							F.line = 118;
							switch (score_state_202078) {
							case -100:
								F.line = 120;
								score_state_202078 = -3;
								F.line = 120;
								score_202089 = addInt(score_202089, score_state_202078);
								break;
							case 5:
								F.line = 123;
								score_state_202078 = -1;
								F.line = 123;
								score_202089 = addInt(score_202089, score_state_202078);
								F.line = 124;
								consecutive_match_count_202083 = 0;
								break;
							case -3:
								if ((unmatched_leading_char_count_202081 < 3)) {
								F.line = 128;
								score_state_202078 = -3;
								F.line = 128;
								score_202089 = addInt(score_202089, score_state_202078);
								}
								
								F.line = 129;
								unmatched_leading_char_count_202081 = addInt(unmatched_leading_char_count_202081, 1);
								break;
							default: 
								F.line = 132;
								score_state_202078 = -1;
								F.line = 132;
								score_202089 = addInt(score_202089, score_state_202078);
								break;
							}
						}
						
						F.line = 134;
						str_index_202085 = addInt(str_index_202085, 1);
					} while(false);
				}
		} while(false);
		F.line = 136;
		nimCopy(result_202077, {Field0: nimMax(0, score_202089), Field1: (0 < score_202089)}, NTI202074);
	framePtr = F.prev;

	return result_202077;

}

function text_203195(s_203197) {
	var result_203198 = null;

	var F={procname:"dochack.text",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
		F.line = 26;
		result_203198 = document.createTextNode(toJSStr(s_203197));
	framePtr = F.prev;

	return result_203198;

}

function dosearch_205305(value_205307) {

		function HEX3Aanonymous_205470(a_205479, b_205480) {
			var result_205484 = 0;

			var F={procname:"dosearch.:anonymous",prev:framePtr,filename:"dochack.nim",line:0};
			framePtr = F;
				F.line = 305;
				result_205484 = subInt(b_205480["Field1"], a_205479["Field1"]);
			framePtr = F.prev;

			return result_205484;

		}

	var result_205308 = null;

	var F={procname:"dochack.dosearch",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
		if (((db_205271[0] != null ? db_205271[0].length : 0) == 0)) {
		F.line = 272;
		var stuff_205314 = null;
		F.line = 273;
		    var request = new XMLHttpRequest();
    request.open("GET", "theindex.html", false);
    request.send(null);

    var doc = document.implementation.createHTMLDocument("theindex");
    doc.documentElement.innerHTML = request.responseText;

    //parser=new DOMParser();
    //doc=parser.parseFromString("<html></html>", "text/html");

    stuff_205314 = doc.documentElement;
    
		F.line = 286;
		db_205271[0] = nimCopy(null, stuff_205314.getElementsByClassName("reference"), NTI86305);
		F.line = 287;
		contents_205273[0] = nimCopy(null, [], NTI205327);
		L1: do {
			F.line = 288;
			var ahref_205414 = null;
			F.line = 156;
			var i_205806 = 0;
			F.line = 157;
			var l_205807 = (db_205271[0] != null ? db_205271[0].length : 0);
			L2: do {
				F.line = 158;
					L3: while (true) {
					if (!(i_205806 < l_205807)) break L3;
						F.line = 288;
						ahref_205414 = db_205271[0][chckIndx(i_205806, 0, db_205271[0].length+0-1)-0];
						F.line = 289;
						if (contents_205273[0] != null) { contents_205273[0].push(ahref_205414.getAttribute("data-doc-search-tag")); } else { contents_205273[0] = [ahref_205414.getAttribute("data-doc-search-tag")]; };
						F.line = 160;
						i_205806 = addInt(i_205806, 1);
						if (!(((db_205271[0] != null ? db_205271[0].length : 0) == l_205807))) {
						F.line = 161;
						failed_assert_impl_57270(makeNimstrLit("/Users/travis/build/nim-lang/Nim/lib/system/iterators.nim(161, 11) `len(a) == L` seq modified while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		}
		
		F.line = 290;
		var ul_205425 = tree_203020(makeNimstrLit("UL"), []);
		F.line = 291;
		result_205308 = tree_203020(makeNimstrLit("DIV"), []);
		F.line = 292;
		set_class_203163(result_205308, makeNimstrLit("search_results"));
		F.line = 293;
		var matches_205444 = [];
		L4: do {
			F.line = 294;
			var i_205456 = 0;
			F.line = 2631;
			var colontmp__205813 = 0;
			F.line = 294;
			colontmp__205813 = (db_205271[0] != null ? db_205271[0].length : 0);
			F.line = 2632;
			var i_205814 = 0;
			L5: do {
				F.line = 2633;
					L6: while (true) {
					if (!(i_205814 < colontmp__205813)) break L6;
						F.line = 294;
						i_205456 = i_205814;
						L7: do {
							F.line = 295;
							var c_205457 = contents_205273[0][chckIndx(i_205456, 0, contents_205273[0].length+0-1)-0];
							if (((c_205457 == "Examples") || (c_205457 == "PEG construction"))) {
							F.line = 300;
							break L7;
							}
							
							F.line = 301;
							var colontmp__205823 = {Field0: 0, Field1: false};
							F.line = 301;
							var score_205458 = 0;
							F.line = 301;
							var matched_205459 = false;
							F.line = 301;
							nimCopy(colontmp__205823, fuzzy_match_202070(value_205307, c_205457), NTI202074);
							F.line = 301;
							score_205458 = colontmp__205823["Field0"];
							F.line = 301;
							matched_205459 = colontmp__205823["Field1"];
							if (matched_205459) {
							F.line = 303;
							if (matches_205444 != null) { matches_205444.push({Field0: db_205271[0][chckIndx(i_205456, 0, db_205271[0].length+0-1)-0], Field1: score_205458}); } else { matches_205444 = [{Field0: db_205271[0][chckIndx(i_205456, 0, db_205271[0].length+0-1)-0], Field1: score_205458}]; };
							}
							
						} while(false);
						F.line = 2635;
						i_205814 = addInt(i_205814, 1);
					}
			} while(false);
		} while(false);
		F.line = 305;
		matches_205444.sort(HEX3Aanonymous_205470);
		L8: do {
			F.line = 306;
			var i_205522 = 0;
			F.line = 2631;
			var colontmp__205819 = 0;
			F.line = 306;
			colontmp__205819 = nimMin((matches_205444 != null ? matches_205444.length : 0), 19);
			F.line = 2632;
			var i_205820 = 0;
			L9: do {
				F.line = 2633;
					L10: while (true) {
					if (!(i_205820 < colontmp__205819)) break L10;
						F.line = 306;
						i_205522 = i_205820;
						F.line = 307;
						matches_205444[chckIndx(i_205522, 0, matches_205444.length+0-1)-0]["Field0"].innerHTML = matches_205444[chckIndx(i_205522, 0, matches_205444.length+0-1)-0]["Field0"].getAttribute("data-doc-search-tag");
						F.line = 308;
						add_203145(ul_205425, tree_203020(makeNimstrLit("LI"), [matches_205444[chckIndx(i_205522, 0, matches_205444.length+0-1)-0]["Field0"]]));
						F.line = 2635;
						i_205820 = addInt(i_205820, 1);
					}
			} while(false);
		} while(false);
		if ((ul_205425.childNodes.length == 0)) {
		F.line = 310;
		add_203145(result_205308, tree_203020(makeNimstrLit("B"), [text_203195(makeNimstrLit("no search results"))]));
		}
		else {
			F.line = 312;
			add_203145(result_205308, tree_203020(makeNimstrLit("B"), [text_203195(makeNimstrLit("search results"))]));
			F.line = 313;
			add_203145(result_205308, ul_205425);
		}
		
	framePtr = F.prev;

	return result_205308;

}

function search() {

		function wrapper_205709() {
			var F={procname:"search.wrapper",prev:framePtr,filename:"dochack.nim",line:0};
			framePtr = F;
				F.line = 320;
				var elem_205711 = document.getElementById("searchInput");
				F.line = 321;
				var value_205712 = elem_205711.value;
				if (!(((value_205712 != null ? value_205712.length : 0) == 0))) {
				if ((oldtoc_205677[0] == null)) {
				F.line = 324;
				oldtoc_205677[0] = document.getElementById("tocRoot");
				}
				
				F.line = 325;
				var results_205718 = dosearch_205305(value_205712);
				F.line = 326;
				replace_by_id_203247("tocRoot", results_205718);
				}
				else {
				if (!((oldtoc_205677[0] == null))) {
				F.line = 328;
				replace_by_id_203247("tocRoot", oldtoc_205677[0]);
				}
				}
			framePtr = F.prev;

			
		}

	var F={procname:"dochack.search",prev:framePtr,filename:"dochack.nim",line:0};
	framePtr = F;
		if (!((timer_205678[0] == null))) {
		F.line = 330;
		clearTimeout(timer_205678[0]);
		}
		
		F.line = 331;
		timer_205678[0] = setTimeout(wrapper_205709, 400);
	framePtr = F.prev;

	
}
